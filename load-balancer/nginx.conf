worker_processes auto;

error_log /dev/stderr notice;
pid /var/run/nginx.pid;

load_module /usr/lib/nginx/modules/ndk_http_module.so;
load_module /usr/lib/nginx/modules/ngx_http_lua_module.so;

pcre_jit on;

daemon off;

events {
    worker_connections 1024;
}

http {
    resolver 127.0.0.11 valid=30s;
    resolver_timeout 5s;

    include /etc/nginx/mime.types;
    default_type application/octet-stream;


    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                    '$status $body_bytes_sent "$http_referer" '
                    '"$http_user_agent" "$http_x_forwarded_for"';

    access_log /dev/stdout main;

    sendfile on;
    keepalive_timeout 65;
    

    server {
        listen 8080;
        server_name larashared;

        location /
        {
            set $target "http://larashared:8080";
            proxy_set_header Host $host;
            proxy_set_header X-Forwarded-Host $host;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass $target;
        }

        location /portainer
        {
            rewrite ^/portainer/(.*)$ /$1 break;
            set $target "http://portainer:9000";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass $target;
        }
    }

    server {
        listen 80;
        server_name _;
        set $sanitized_target "";

        access_by_lua_block {
            local host = ngx.var.host

            -- Function to sanitize and convert the domain
            local function sanitize_and_convert(domain)
                return string.lower(string.gsub(domain, "[^%w-_]", ""))
            end

            -- Apply the logic and set a shared target variable
            local sanitized_target = sanitize_and_convert(host)
            if not sanitized_target or sanitized_target == "" then
                ngx.log(ngx.ERR, "Failed to generate target container name for host: ", host)
                ngx.exit(ngx.HTTP_NOT_FOUND)
            end

            ngx.var.sanitized_target = sanitized_target
        }

        location / {
            rewrite ^/(.*)$ /$1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://$sanitized_target;
        }

        location /phpmyadmin {
            rewrite ^/phpmyadmin/(.*)$ /$1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://$sanitized_target-phpmyadmin;
        }

        location /filemanager {
            rewrite ^/filemanager/(.*)$ /$1 break;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_pass http://$sanitized_target-filebrowser;
        }
    }
}
